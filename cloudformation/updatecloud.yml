AWSTemplateFormatVersion: '2010-09-09'
Description: Setup VPC with Network Firewall, NLB, and associated resources

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.micro
      - t3.small
    ConstraintDescription: Must be a valid EC2 instance type.
  AMIID:
    Description: The AMI ID to use for the instance
    Type: AWS::EC2::Image::Id
    Default: ami-012a3705f5e65affd
    ConstraintDescription: Must be a valid AMI ID.


Resources:
  # VPC
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Nlbvpc

  # Public Subnet
  firewallsubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1a"
      Tags:
        - Key: Name
          Value: Firewall-Subnet

  # Private Subnet 1
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.10.0/24
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1a"
      Tags:
        - Key: Name
          Value: public-subnet

  # Private Subnet 2
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.11.0/24
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1a"
      Tags:
        - Key: Name
          Value: private-subnet
        


  # Internet Gateway
  Igw:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}

  # Attach Internet Gateway to VPC
  IGWAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref Igw
  
  # Route Table for internetgateway
  RouteTableinternet:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Internet-route

  # attaching to edge association
  Internetedge:
    Type: AWS::EC2::GatewayRouteTableAssociation
    Properties:
      GatewayId: !GetAtt Igw.InternetGatewayId
      RouteTableId: !Ref RouteTableinternet

  # publicsubnet with endpoint
  RouteTableinternetRoute0:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 10.0.10.0/24
      RouteTableId: !Ref RouteTableinternet
      VpcEndpointId: !Select ["1", !Split [":", !Select ["0", !GetAtt NetworkFirewall.EndpointIds]]]
    DependsOn: NetworkFirewall 




  # Route Table for Public Subnet
  RouteTablefirewall:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: firewall-route-table

  # Route Table Association for Public Subnet
  RouteTablefirewallAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTablefirewall
      SubnetId: !Ref firewallsubnet1

  # Route for Internet Access in Public Subnet
  RouteTablefirewallRoute0:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref RouteTablefirewall
      GatewayId: !Ref Igw



  # Security Group
  SecurityGroup1:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Build a custom security group.
      VpcId: !Ref VPC
      SecurityGroupEgress: []
      SecurityGroupIngress:
        - FromPort: 0
          ToPort: 0
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - FromPort: 0
          ToPort: 65535
          IpProtocol: tcp
          CidrIp: 10.0.0.0/16
        - FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - FromPort: 0
          ToPort: 0
          IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      GroupName: custom-sg

    
  # NAT gateway
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      AllocationId:
        'Fn::GetAtt':
          - NatGw1ElasticIP
          - AllocationId
      Tags:
        - Key: Name
          Value: NATGWA
  NatGw1ElasticIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  # Stateful Rule Group
  RuleGroup1:
    Type: 'AWS::NetworkFirewall::RuleGroup'
    Properties:
      Capacity: '1000'
      RuleGroupName: statefulrule1
      Type: STATEFUL
      Tags:
        - Key: Name
          Value: statefulrule1
      RuleGroup:
        RulesSource:
          StatefulRules:
            - Action: PASS
              Header:
                Destination: ANY
                DestinationPort: ANY
                Direction: ANY
                Protocol: TCP
                Source: ANY
                SourcePort: ANY
              RuleOptions:
                - Keyword: 'sid:1'
            - Action: PASS
              Header:
                Destination: ANY
                DestinationPort: ANY
                Direction: ANY
                Protocol: SSH
                Source: ANY
                SourcePort: ANY
              RuleOptions:
                - Keyword: 'sid:2'
            - Action: PASS
              Header:
                Destination: ANY
                DestinationPort: ANY
                Direction: ANY
                Protocol: HTTP
                Source: ANY
                SourcePort: ANY
              RuleOptions:
                - Keyword: 'sid:3'

  # Stateless Rule Group
  RuleGroup2:
    Type: 'AWS::NetworkFirewall::RuleGroup'
    Properties:
      Capacity: '1000'
      RuleGroupName: statlessrule1
      Type: STATELESS
      Tags:
        - Key: Name
          Value: statlessrule1
      Description: statlessrule
      RuleGroup:
        RulesSource:
          StatelessRulesAndCustomActions:
            StatelessRules:
              - Priority: 1
                RuleDefinition:
                  Actions:
                    - 'aws:forward_to_sfe'
                  MatchAttributes:
                    Sources:
                      - AddressDefinition: 0.0.0.0/0
                    Destinations:
                      - AddressDefinition: 0.0.0.0/0

  # Firewall Policy
  FirewallPolicy:
    Type: 'AWS::NetworkFirewall::FirewallPolicy'
    Properties:
      FirewallPolicyName: fwpolicy
      FirewallPolicy:
        StatelessDefaultActions:
          - 'aws:forward_to_sfe'
        StatelessFragmentDefaultActions:
          - 'aws:forward_to_sfe'
        StatefulRuleGroupReferences:
          - ResourceArn: !Ref RuleGroup1
        StatelessRuleGroupReferences:
          - Priority: 1
            ResourceArn: !Ref RuleGroup2

  # Network Firewall
  NetworkFirewall:
    Type: 'AWS::NetworkFirewall::Firewall'
    Properties:
      FirewallName: network-firewall
      VpcId: !Ref VPC
      SubnetMappings:
        - SubnetId: !Ref firewallsubnet1
      FirewallPolicyArn: !Ref FirewallPolicy
      DeleteProtection: false
      FirewallPolicyChangeProtection: false
      SubnetChangeProtection: false
      Tags:
        - Key: Name
          Value: network-firewall


  # Route Table for Private Subnet 1
  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public-route1
    DependsOn: NetworkFirewall 

  # Route Table Association for Private Subnet 1
  RouteTablePublicAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnet1
    DependsOn: NetworkFirewall 

  # Route for Private Subnet 1 to Firewall Endpoint
  RouteTablePublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      VpcEndpointId: !Select ["1", !Split [":", !Select ["0", !GetAtt NetworkFirewall.EndpointIds]]]
    DependsOn: NetworkFirewall 
      # VpcEndpointId: !GetAtt NetworkFirewall.EndpointId

  # Route Table for Private Subnet 2
  RouteTablePrivate1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private-route1
    DependsOn: NetworkFirewall 

  # Route Table Association for Private Subnet 2
  RouteTablePrivate1Association1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTablePrivate1
      SubnetId: !Ref PrivateSubnet1
    DependsOn: NetworkFirewall 

  # Route for Private Subnet 2 to Firewall Endpoint
  RouteTablePrivate1Route:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePrivate1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway      
    DependsOn: NetworkFirewall 







  
  MyEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMIID
      InstanceType: !Ref InstanceType
      # SubnetId: !GetAtt PrivateSubnet3.SubnetId
      # SecurityGroups:
      #  - !Ref SecurityGroup1
      KeyName: ami
      NetworkInterfaces:
        - DeleteOnTermination: true
          DeviceIndex: 0
          SubnetId: !GetAtt PrivateSubnet1.SubnetId
          GroupSet:
            - !GetAtt SecurityGroup1.GroupId


 



  # Network Load Balancer
  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internet-facing
      IpAddressType: ipv4
      Name: MyNLB
      SecurityGroups:
        - !Ref SecurityGroup1 
      SubnetMappings:
        - SubnetId: !GetAtt PublicSubnet1.SubnetId 
          AllocationId: !GetAtt NetworkIP.AllocationId
      # Subnets:
      #   - !Ref PublicSubnet1 
          
    DependsOn: IGWAttachment
 

  #  AllocationId: !GetAtt NetworkIP.AllocationId
  # AllocationId:
  #           'Fn::GetAtt':
  #             - NetworkIP
  #             - AllocationId

  NetworkIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      
      


  NetworkLoadBalancerTargetGroup1:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: MyTargetGroup
      TargetType: instance
      VpcId: !Ref VPC
      Protocol: TCP
      Port: 80
      Targets:
        - Id: !GetAtt MyEC2Instance.InstanceId
          Port: 80
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthCheckPort: 80
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

  NetworkLoadBalancerListener1:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn:
        !Ref NetworkLoadBalancer
      Protocol: TCP
      Port: 80
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref NetworkLoadBalancerTargetGroup1

 
    






Outputs:

  NetworkLoadBalancerDNS:
    Description: DNS Name of the Network Load Balancer
    Value: !GetAtt NetworkLoadBalancer.DNSName





 NetworkLoadBalancerTargetGroup1:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      TargetType: ip
      VpcId: '!Ref VPC'
      Protocol: TCP
      Port: 80
      Targets:
        - Id: 10.0.10.4
          Port: 80
          AvailabilityZone: 'us-east-1a'
        - Id: 10.0.13.1
          Port: 80
          AvailabilityZone: 'us-east-1a'
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthCheckPort: 80
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3