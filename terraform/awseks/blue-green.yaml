#ecommerce-blue-deployment.yaml:
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ecommerce-blue
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ecommerce
      version: blue
  template:
    metadata:
      labels:
        app: ecommerce
        version: blue
    spec:
      containers:
      - name: ecommerce
        image: httpd
        ports:
        - containerPort: 80


#ecommerce-green-deployment.yaml:
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ecommerce-green
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ecommerce
      version: green
  template:
    metadata:
      labels:
        app: ecommerce
        version: green
    spec:
      containers:
      - name: ecommerce
        image: nginx
        ports:
        - containerPort: 8080


#blue-service.yaml:
---
apiVersion: v1
kind: Service
metadata:
  name: ecommerce-blue
spec:
  selector:
    app: ecommerce
    version: blue
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80


#green-service.yaml:
---
apiVersion: v1
kind: Service
metadata:
  name: ecommerce-green
spec:
  selector:
    app: ecommerce
    version: green
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80


#ingress.yaml:
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ecommerce-ingress
  annotations:
    alb.ingress.kubernetes.io/load-balancer-name: test-alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/healthcheck-protocal: HTTP
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/success-codes: 200,404
    # alb.ingress.kubernetes.io/group.name: ecommerce
    # alb.ingress.kubernetes.io/actions.ssl-redirect: |
    #   {"Type": "redirect", "RedirectConfig": {"Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}
    alb.ingress.kubernetes.io/backend-protocol: HTTP
spec:
  ingressClassName: alb
  rules: 
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ecommerce-blue
            port:
              number: 80


#update-image-and-annotate.sh:

#!/bin/bash
# Update the green deployment image
# kubectl set image deployment/ecommerce-green ecommerce=<ECR_REPOSITORY_URL>:<NEW_GREEN_TAG>

# Update ingress annotation to switch traffic to green service

# kubectl patch ingress ecommerce-ingress -p '{"spec":{"rules":[{"http":{"paths":[{"path":"/","pathType":"Prefix","backend":{"service":{"name":"ecommerce-green","port":{"number":80}}}}]}}]}}'

# ecommerce-blue-deployment.yaml:
# ```yaml
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: ecommerce-blue
# spec:
#   replicas: 2
#   selector:
#     matchLabels:
#       app: ecommerce
#       version: blue
#   template:
#     metadata:
#       labels:
#         app: ecommerce
#         version: blue
#     spec:
#       topologySpreadConstraints:
#       - maxSkew: 1
#         topologyKey: topology.kubernetes.io/zone
#         whenUnsatisfiable: DoNotSchedule
#         labelSelector:
#           matchLabels:
#             app: ecommerce
#       containers:
#       - name: ecommerce
#         image: <ECR_REPOSITORY_URL>:<BLUE_TAG>
#         ports:
#         - containerPort: 8080
#         readinessProbe:
#           httpGet:
#             path: /health
#             port: 8080
#           initialDelaySeconds: 5
#           periodSeconds: 10
#         livenessProbe:
#           httpGet:
#             path: /health
#             port: 8080
#           initialDelaySeconds: 15
#           periodSeconds: 20
# ```

# #ecommerce-green-deployment.yaml:
# ```yaml
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: ecommerce-green
# spec:
#   replicas: 2
#   selector:
#     matchLabels:
#       app: ecommerce
#       version: green
#   template:
#     metadata:
#       labels:
#         app: ecommerce
#         version: green
#     spec:
#       topologySpreadConstraints:
#       - maxSkew: 1
#         topologyKey: topology.kubernetes.io/zone
#         whenUnsatisfiable: DoNotSchedule
#         labelSelector:
#           matchLabels:
#             app: ecommerce
#       containers:
#       - name: ecommerce
#         image: <ECR_REPOSITORY_URL>:<GREEN_TAG>
#         ports:
#         - containerPort: 8080
#         readinessProbe:
#           httpGet:
#             path: /health
#             port: 8080
#           initialDelaySeconds: 5
#           periodSeconds: 10
#         livenessProbe:
#           httpGet:
#             path: /health
#             port: 8080
#           initialDelaySeconds: 15
#           periodSeconds: 20
# ```

# #blue-service.yaml:
# ```yaml
# apiVersion: v1
# kind: Service
# metadata:
#   name: ecommerce-blue
# spec:
#   selector:
#     app: ecommerce
#     version: blue
#   ports:
#   - protocol: TCP
#     port: 80
#     targetPort: 8080
# ```

# #green-service.yaml:
# ```yaml
# apiVersion: v1
# kind: Service
# metadata:
#   name: ecommerce-green
# spec:
#   selector:
#     app: ecommerce
#     version: green
#   ports:
#   - protocol: TCP
#     port: 80
#     targetPort: 8080
# ```

# #ingress.yaml:
# ```yaml
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: ecommerce-ingress
#   annotations:
#     kubernetes.io/ingress.class: alb
#     alb.ingress.kubernetes.io/group.name: ecommerce
#     alb.ingress.kubernetes.io/backend-protocol: HTTP
#     alb.ingress.kubernetes.io/healthcheck-path: /health
#     alb.ingress.kubernetes.io/healthcheck-interval-seconds: '10'
#     alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
#     alb.ingress.kubernetes.io/success-codes: '200-399'
#     alb.ingress.kubernetes.io/load-balancer-attributes: routing.http2.enabled=true
#     alb.ingress.kubernetes.io/subnets: <SUBNET_ID_1>,<SUBNET_ID_2>
# spec:
#   ingressClassName: alb
#   rules:
#   - http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: ecommerce-blue
#             port:
#               number: 80
# ```

# #update-image-and-annotate.sh:
# ```bash
# #!/bin/bash
# set -e

# TARGET_SERVICE=$1

# if [[ "$TARGET_SERVICE" != "blue" && "$TARGET_SERVICE" != "green" ]]; then
#   echo "Usage: $0 [blue|green]"
#   exit 1
# fi

# kubectl set image deployment/ecommerce-$TARGET_SERVICE ecommerce=<ECR_REPOSITORY_URL>:<NEW_TAG>

# kubectl patch ingress ecommerce-ingress -p '{"spec":{"rules":[{"http":{"paths":[{"path":"/","pathType":"Prefix","backend":{"service":{"name":"ecommerce-'$TARGET_SERVICE'","port":{"number":80}}}}]}}]}}'

# kubectl rollout status deployment ecommerce-$TARGET_SERVICE

# echo "Traffic switched to $TARGET_SERVICE service."
# ```
