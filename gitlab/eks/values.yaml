[ec2-user@ip-10-0-0-125 ~]$ cat values.yaml
global:
  edition: ee  # üîÑ Changed from 'ce' to 'ee'
  ingress:
    configureCertmanager: false
    tls:
      enabled: false
    class: alb
    annotations:
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/group.name: gitlab-group
      
  hosts:
    domain: ajaymaddela.online  # üîÑ Replace with your domain

gitlab:
  webservice:
    ingress:
      enabled: true
      path: /
      annotations:
        alb.ingress.kubernetes.io/group.name: gitlab-group
        alb.ingress.kubernetes.io/healthcheck-path: /-/health
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    service:
      type: ClusterIP
      internalPort: 8080  # ‚úÖ Default for webservice

  registry:
    enabled: true
    ingress:
      enabled: true
      path: /registry
      annotations:
        alb.ingress.kubernetes.io/group.name: gitlab-group
        alb.ingress.kubernetes.io/healthcheck-path: /
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    service:
      type: ClusterIP
      internalPort: 5000  # ‚úÖ Default for registry

  gitlab-shell:
    service:
      type: ClusterIP
      internalPort: 2222  # ‚ö† Needed internally, no port 22 via ALB

nginx-ingress:
  enabled: false  # ‚ùå Disable GitLab's bundled nginx controller

certmanager:
  install: false  # ‚ùå Skip cert-manager if you're using your own TLS secret

gitlab-runner:
  install: false

[ec2-user@ip-10-0-0-125 ~]$

# configure like below
global:
  edition: ee
  ingress:
    configureCertmanager: false # False, as ALB handles SSL termination with ACM
    tls:
      enabled: false # False, as ALB handles SSL termination
    class: alb
    annotations:
      kubernetes.io/ingress.class: alb # Redundant but harmless
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/group.name: gitlab-group
      alb.ingress.kubernetes.io/certificate-arn: "<YOUR_ACM_CERT_ARN>" # REQUIRED for HTTPS on ALB
      alb.ingress.kubernetes.io/backend-protocol: HTTP # ALB sends HTTP to pods after SSL termination

  hosts:
    domain: ajaymaddela.online # Replace with your actual domain

gitlab:
  webservice:
    ingress:
      enabled: true
      path: /
      annotations:
        alb.ingress.kubernetes.io/group.name: gitlab-group
        alb.ingress.kubernetes.io/healthcheck-path: /-/health
        # REMOVED: alb.ingress.kubernetes.io/listen-ports - handled by global
        alb.ingress.kubernetes.io/backend-protocol: HTTP # Explicitly setting backend protocol for clarity
        alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30' # Increase if health checks are flaky
        alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '10' # Increase if health checks are flaky
        alb.ingress.kubernetes.io/healthy-threshold-count: '2'
        alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'
        alb.ingress.kubernetes.io/success-codes: '200'
    service:
      type: ClusterIP
      internalPort: 8080 # Default for webservice

  registry:
    enabled: true
    ingress:
      enabled: true
      path: /registry
      annotations:
        alb.ingress.kubernetes.io/group.name: gitlab-group
        alb.ingress.kubernetes.io/healthcheck-path: /v2/ # More robust for registry health checks
        # REMOVED: alb.ingress.kubernetes.io/listen-ports - handled by global
        alb.ingress.kubernetes.io/backend-protocol: HTTP # Explicitly setting backend protocol for clarity
        alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
        alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '10'
        alb.ingress.kubernetes.io/healthy-threshold-count: '2'
        alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'
        alb.ingress.kubernetes.io/success-codes: '200'
    service:
      type: ClusterIP
      internalPort: 5000 # Default for registry

  kas:
    enabled: true # Ensure KAS is enabled
    ingress:
      enabled: true
      # KAS often needs a specific path or host for its ingress rule
      # The GitLab chart typically handles this, but if you need a dedicated host:
      # hostname: kas.ajaymaddela.online
      annotations:
        alb.ingress.kubernetes.io/group.name: gitlab-group
        alb.ingress.kubernetes.io/healthcheck-path: /-/health # KAS health check path
        alb.ingress.kubernetes.io/healthcheck-port: '8154' # Crucial: KAS metrics/health endpoint is often on 8154
        alb.ingress.kubernetes.io/backend-protocol: HTTPS # KAS uses gRPC, often over TLS (HTTPS) from ALB
        # Increase health check thresholds/intervals if KAS is slow to start
        alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
        alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '10'
        alb.ingress.kubernetes.io/healthy-threshold-count: '2'
        alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'
        alb.ingress.kubernetes.io/success-codes: '200'
    service:
      type: ClusterIP
      # These are default KAS service ports, ensure they match what the KAS pod exposes
      kasExternalPort: 8150
      kasInternalPort: 8150
      metricsExternalPort: 8154
      metricsInternalPort: 8154