pipeline {
    agent { label 'spc' }
    stages {
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }
        stage('Checkout from Git'){
            steps{
                git branch: 'main', url: 'https://github.com/ajaymaddela/netflix.git'
            }
        }
        stage('Build docker image') {
            steps {
                sh "docker image build -t ajaykumar020/netflix:1.0 ."
            }
        }
        stage('Trivy Scan') {
            steps {
                script {
                    sh "trivy image --format json -o trivy-report.json ajaykumar020/netflix"
                }
                 archiveArtifacts artifacts: 'trivy-report.json', allowEmptyArchive: true
            }
        }
        stage('publish docker image') {
            steps {
                sh "docker image push ajaykumar020/netflix:1.0"
            }
        }
        
        stage('Terraform Init') {
            steps {
                // dir('deployment/terraform') {
                    sh 'chmod +x terraformscript.sh'
                    sh './terraformscript.sh'
                // }
            }
        }

        // stage('Terraform Plan') {
        //     steps {
        //         dir('deployment/terraform') {
        //             script {
        //                 sh 'terraform plan'
        //             }
        //         }
        //     }
        // }

        // stage('Terraform Apply or Destroy') {
        //     steps {
        //         dir('deployment/terraform') {
        //             script {
        //                 // sh 'sudo apt-get update && sudo apt-get install -y jq'
        //                 // // Check if resource group already exists
        //                 // def exists = sh(script: 'terraform show -json | jq \'.values.root_module.resources[] | select(.type == "azurerm_resource_group") | .values.name\'', returnStdout: true).trim()

        //                 // if (exists) {
        //                 //     // Destroy existing resource group
        //                 //     sh 'terraform destroy -auto-approve'
        //                 // }

        //                 // Apply Terraform configuration
        //                 sh 'terraform apply -auto-approve'
        //             }
        //         }
        //     }
        // }
    
        stage('deploy to k8s') {
            steps {
                sh "kubectl apply -f deployment/k8s/deployment.yaml"
                sh """
                kubectl patch deployment netflix-app -p '{"spec":{"template":{"spec":{"containers":[{"name":"netflix-app","image":"ajaykumar020/netflix:1.0"}]}}}}'
                """
            }
        }

        stage('kubescape Scan') {
            steps {
                script {
                    sh "/usr/local/bin/kubescape scan -t 40 deployment/k8s/deployment.yaml --format junit -o TEST-report.xml"
                    junit "**/TEST-*.xml"
                }
                
            }
        }
    }
}
