pipeline {
    agent any
    
    environment {
        AWS_DEFAULT_REGION = 'us-east-1'  // Replace with your AWS region
        AWS_ACCOUNT_ID = '3847-7781-9802'  // Replace with your AWS account ID
        AWS_ECR_URL = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
        ECR_PUBLIC_REPO_URL = 'public.ecr.aws/b9r5x6f7'  // Replace with your ECR Public repository URL
    }
    
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/ajaymaddela/netflix.git'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                sh "docker build -t project:latest ."
            }
        }
        
        stage('Push to ECR Public') {
            steps {
                script {
                    // Authenticate with ECR Public using AWS credentials from Jenkins credentials store
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-ecr-access', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        // Get ECR Public login password and login to Docker
                        def ecrPassword = sh(script: "aws ecr-public get-login-password --region ${AWS_DEFAULT_REGION}", returnStdout: true).trim()
                        sh "echo ${ecrPassword} | docker login --username AWS --password-stdin ${ECR_PUBLIC_REPO_URL}"
                        
                        // Tag and push the Docker image to ECR Public
                        sh "docker tag project:latest ${ECR_PUBLIC_REPO_URL}/project:latest"
                        sh "docker push ${ECR_PUBLIC_REPO_URL}/project:latest"
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo 'Docker image built and pushed successfully to ECR Public!'
            // Add further actions upon successful build if needed
        }
        
        failure {
            echo 'Build failed! Check Jenkins logs for details.'
            // Add further actions upon build failure if needed
        }
    }
}